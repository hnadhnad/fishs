using UnityEngine;
using UnityEngine.UI;
using System.Collections;

[RequireComponent(typeof(Fish))]
public class Boss : MonoBehaviour
{
    [Header("Boss Stats")]
    public float maxHealth = 1000f;
    public float currentHealth;

    public float maxHunger = 500f;
    public float currentHunger;

    [Header("Decay Settings")]
    public float hungerDecayRate = 5f;
    public float hungerDamageRate = 10f;

    [Header("UI References")]
    public GameObject bossUIPanel;
    public Slider healthBar;
    public Slider hungerBar;

    [HideInInspector] public Fish fish;
    [HideInInspector] public Animator animator;

    private IBossState currentState;

    [Header("Boss Movement")]
    [Tooltip("T·ªëc ƒë·ªô di chuy·ªÉn b√¨nh th∆∞·ªùng (retreat, reentry, v.v.)")]
    public float moveSpeed = 4f;

    [Tooltip("T·ªëc ƒë·ªô khi d√≠ theo lure")]
    public float chaseLureSpeed = 6f;


    // ================= PHASE 1 =================
    [Header("Phase1 - Dash")]
    [Tooltip("S·ªë l·∫ßn dash trong 1 v√≤ng t·∫•n c√¥ng")]
    public int phase1DashCount = 3;

    [Tooltip("Kho·∫£ng c√°ch boss dash m·ªói l·∫ßn")]
    public float phase1DashDistance = 6f;

    [Tooltip("Th·ªùi gian 1 dash (gi√¢y)")]
    public float phase1DashDuration = 0.25f;

    [Tooltip("Th·ªùi gian ngh·ªâ gi·ªØa c√°c dash")]
    public float phase1DashInterval = 0.5f;

    [Tooltip("Th·ªùi gian pause sau khi dash tr√∫ng (gi·∫£ l·∫≠p l·ª±c)")]
    public float phase1DashImpactPause = 0.12f;


    [Header("Phase1 - Shoot")]
    [Tooltip("Prefab ƒë·∫°n c·ªßa boss")]
    public GameObject phase1BulletPrefab;

    [Tooltip("S·ªë vi√™n ƒë·∫°n b·∫Øn trong 1 v√≤ng")]
    public int phase1ShootCount = 3;

    [Tooltip("Kho·∫£ng c√°ch spawn ƒë·∫°n t√≠nh t·ª´ boss v·ªÅ ph√≠a player")]
    public float phase1BulletSpawnOffset = 1.5f;

    [Tooltip("Th·ªùi gian ngh·ªâ gi·ªØa m·ªói ph√°t b·∫Øn")]
    public float phase1ShootInterval = 0.5f;

    [Tooltip("T·ªëc ƒë·ªô bay c·ªßa ƒë·∫°n")]
    public float phase1BulletSpeed = 8f;


    [Header("Phase1 - Cycle Timings")]
    [Tooltip("Th·ªùi gian ngh·ªâ gi·ªØa dash v√† shoot")]
    public float phase1CyclePause = 0.4f;


    [Header("Phase1 - Retreat / Lure")]
    [Tooltip("N·∫øu hunger <= % n√†y c·ªßa maxHunger ‚Üí boss s·∫Ω r√∫t lui")]
    [Range(0f, 1f)] public float phase1RetreatHungerFraction = 0.5f;

    [Tooltip("Kho·∫£ng boss ƒëi ra ngo√†i map (theo X) khi retreat")]
    public float phase1ExitDistance = 6f;

    [Tooltip("Prefab lure c√° m·ªìi ƒë·ªÉ boss d·ª• v√†o map")]
    public GameObject phase1LurePrefab;

    [Tooltip("T·ªëc ƒë·ªô b∆°i c·ªßa lure")]
    public float phase1LureSpeed = 2.5f;

    [Tooltip("Kho·∫£ng spawn lure tr∆∞·ªõc m·∫∑t boss (theo tr·ª•c X)")]
    public float phase1LureSpawnForward = 1.5f;

    [Tooltip("L∆∞·ª£ng hunger m√† boss h·ªìi khi ƒÉn lure")]
    public float phase1LureHealAmount = 150f;


    [Header("Phase1 - After Lure")]
    [Tooltip("S·ªë l·∫ßn dash sau khi ƒÉn lure")]
    public int phase1PostLureDashCount = 2;

    [Tooltip("S·ªë l·∫ßn b·∫Øn sau khi ƒÉn lure")]
    public int phase1PostLureShootCount = 5;

    [Tooltip("Th·ªùi gian ngh·ªâ sau khi ƒÉn lure tr∆∞·ªõc khi ti·∫øp t·ª•c v√≤ng m·ªõi")]
    public float phase1AfterLurePause = 0.5f;

    // ================= PHASE 2 =================
    [Header("Phase2 - Chase & Bomb")]
    public float phase2ChaseMultiplier = 1.2f;   // Boss d√≠ player nhanh h∆°n (x t·ªëc ƒë·ªô g·ªëc)
    public GameObject phase2BombPrefab;          // Prefab bomb
    public int phase2BombPerCycle = 5;           // M·ªói l∆∞·ª£t b·∫Øn 5 tr√°i bomb
    public float phase2BombInterval = 0.8f;      // Delay gi·ªØa c√°c bomb
    public float phase2BombRadius = 3f;          // B√°n k√≠nh n·ªï
    public float phase2BombDelay = 1.5f;         // Th·ªùi gian c·∫£nh b√°o tr∆∞·ªõc khi n·ªï
    public float phase2BombDamage = 200f;        // Boss m·∫•t m√°u n·∫øu d√≠nh bomb
    public float phase2BossStunDuration = 2f;    // Th·ªùi gian Boss b·ªã cho√°ng sau khi d√≠nh bomb
    public float phase2PreShootDelay = 0.3f;


    [Header("Phase2 - Meat drop")]
    public GameObject meatPrefab;             // Prefab mi·∫øng th·ªãt
    public int phase2MeatCount = 4;           // S·ªë l∆∞·ª£ng th·ªãt r∆°i
    public float phase2MeatSpawnOffset = 1f;  // Kho·∫£ng c√°ch spawn th·ªãt so v·ªõi boss
    public float phase2MeatScatterSpeed = 3f; // T·ªëc ƒë·ªô th·ªãt bay ra ngo√†i

    public float phase2EatMeatSpeed = 3f;        // T·ªëc ƒë·ªô boss di chuy·ªÉn ƒë·ªÉ ƒÉn th·ªãt

    // Boss b·ªã stun timer
    private float stunTimer = 0f;
    public bool IsStunned => stunTimer > 0f;

    private bool isInvulnerable = false;

    // ================= PHASE 3 =================
    [Header("Phase3 - Circle Bombs")]
    public GameObject phase3BombPrefab;       // prefab bomb d√πng ƒë·ªÉ t·∫°o 't∆∞·ªùng' v√≤ng
    public int phase3BombCount = 12;          // t·ªïng s·ªë bomb t·∫°o v√≤ng
    public float phase3CircleRadius = 4f;     // b√°n k√≠nh v√≤ng tr√≤n bomb
    public float phase3BombMoveDuration = 1.2f; // th·ªùi gian bomb di chuy·ªÉn t·ª´ ngo·∫°i vi v√†o v·ªã tr√≠ v√≤ng
    public float phase3BombSpawnOffscreen = 2.5f; // offset spawn ngo√†i map (bao xa ngo√†i edge)
    public float phase3ColumnHeight = 6f;     // chi·ªÅu cao c·ªôt spawn ƒë·ªÉ tr·∫£i d·ªçc

    [Header("Phase3 - Boss Dash (ri√™ng)")]
    public float phase3DashDistance = 6f;
    public float phase3DashDuration = 0.25f;
    public float phase3DashInterval = 0.25f;
    public float phase3BombCollisionThreshold = 0.6f; // kho·∫£ng c√°ch coi l√† "ƒë√¢m tr√∫ng" bomb
    public float phase3BombStunDuration = 2.0f; // boss b·ªã cho√°ng khi ƒë√¢m tr√∫ng
    public float phase3BombHitDamage = 200f;    // l∆∞·ª£ng m√°u boss m·∫•t khi ƒë√¢m tr√∫ng (ƒë·ªÉ quy ra meat)
    public int phase3MeatCount = 4;             // s·ªë mi·∫øng th·ªãt spawn khi boss ƒë√¢m tr√∫ng
    public float phase3MeatSpawnOffset = 0.8f;  // kho·∫£ng c√°ch spawn mi·∫øng th·ªãt quanh boss (b√™n trong v√≤ng)
    public float phase3RestAfterMeat = 1.0f;    // th·ªùi gian boss ngh·ªâ sau ƒÉn h·∫øt th·ªãt




    void Awake()
    {
        fish = GetComponent<Fish>();
        animator = GetComponent<Animator>();

        if (bossUIPanel == null)
            bossUIPanel = GameObject.Find("BossUI");

        if (healthBar == null && bossUIPanel != null)
        {
            Transform hb = bossUIPanel.transform.Find("HealthBar");
            if (hb != null)
                healthBar = hb.GetComponent<Slider>();
        }

        if (hungerBar == null && bossUIPanel != null)
        {
            Transform hub = bossUIPanel.transform.Find("HungerBar");
            if (hub != null)
                hungerBar = hub.GetComponent<Slider>();
        }
    }

    void Start()
    {
        // N·∫øu ch∆∞a set trong Inspector th√¨ m·∫∑c ƒë·ªãnh full m√°u/ƒë√≥i
        if (currentHealth <= 0) currentHealth = maxHealth;
        if (currentHunger <= 0) currentHunger = maxHunger;

        if (healthBar != null) healthBar.maxValue = maxHealth;
        if (hungerBar != null) hungerBar.maxValue = maxHunger;

        if (healthBar != null) healthBar.value = currentHealth;
        if (hungerBar != null) hungerBar.value = currentHunger;

        if (bossUIPanel != null)
            bossUIPanel.SetActive(true);

        // ‚úÖ B·∫Øt ƒë·∫ßu ·ªü Phase1
        ChangeState(new BossPhase1State());
    }


    void Update()
    {
        // Gi·∫£m ƒë√≥i theo th·ªùi gian
        currentHunger -= hungerDecayRate * Time.deltaTime;
        currentHunger = Mathf.Clamp(currentHunger, 0, maxHunger);

        if (currentHunger <= 0)
        {
            currentHealth -= hungerDamageRate * Time.deltaTime;
            currentHealth = Mathf.Clamp(currentHealth, 0, maxHealth);
        }

        if (healthBar != null) healthBar.value = currentHealth;
        if (hungerBar != null) hungerBar.value = currentHunger;

                // üî• Gi·∫£m stunTimer theo th·ªùi gian
        if (stunTimer > 0f)
        {
            stunTimer -= Time.deltaTime;
            if (stunTimer < 0f) stunTimer = 0f;
        }


        // Update logic c·ªßa state hi·ªán t·∫°i
        currentState?.Update(this);

        // Check phase chuy·ªÉn ƒë·ªïi (gi·ªØ nguy√™n)
        HandlePhaseLogic();

        if (currentHealth <= 0) Die();
    }

    void HandlePhaseLogic()
    {
        if (currentHealth <= maxHealth * 0.7f && !(currentState is BossPhase2State))
            ChangeState(new BossPhase2State());
        else if (currentHealth <= maxHealth * 0.5f && !(currentState is BossPhase3State))
            ChangeState(new BossPhase3State());
        else if (currentHealth <= maxHealth * 0.2f && !(currentState is BossEnragedState))
            ChangeState(new BossEnragedState());
    }

    public void ChangeState(IBossState newState)
    {
        currentState?.Exit(this);
        currentState = newState;
        currentState.Enter(this);
    }
    public void TakeDamage(float dmg, float stunDuration)
    {
        // N·∫øu ƒëang stun v√† invulnerable th√¨ b·ªè qua dame m·ªõi
        if (isInvulnerable) return;

        currentHealth = Mathf.Max(0, currentHealth - dmg);
        Stun(stunDuration);

        if (currentHealth <= 0) Die();
    }

    public void Stun(float duration)
    {
        stunTimer = duration;
        isInvulnerable = true;
        StartCoroutine(ClearInvulnerability(duration));
    }

    private IEnumerator ClearInvulnerability(float duration)
    {
        yield return new WaitForSeconds(duration);
        isInvulnerable = false;
    }




    void Die()
    {
        if (bossUIPanel != null)
            bossUIPanel.SetActive(false);

        Destroy(gameObject);
    }
}
